/* ------------------------------------------
** A collection of global functions that deal with the realities of dates in Ninox
** -----------------------------------------*/
function AddWorkDay( startdate : date , days : number ) do 
    var add_days := days;
    let increment := if days < 0 then -1 else 1 end;
    while workdays(startdate, date(year(startdate),month(startdate), day(startdate) + add_days)) < days + increment do 
     add_days := add_days + increment; end;
date(year(startdate),month(startdate), day(startdate) + add_days)     
end; 

function IsDate(xDate : date) do
 	"------ Determine if this is a valid date -----";
	if date(xDate) = date(0) then false else true end
end;
function DateOnly(xDate : date) do
	"---- strip out the annoying time component which causes all manner of issues ---";
	date(roundup(number(xDate) / 86400000) * 86400000)
end;
function NDate(d : date) do
	number(DateOnly(d))
end;
function DateCompare(d1 : date,d2 : date,op : text) do
	"------------------------
	 if you want to do and or scenarios you'll see 
	 why you need this functionality
	 -----------------------";
	switch op do
	case "<":
		NDate(d1) < NDate(d2)
	case ">":
		NDate(d1) > NDate(d2)
	case "<=":
		NDate(d1) <= NDate(d2)
	case ">=":
		NDate(d1) >= NDate(d2)
	default:
		NDate(d1) = NDate(d2)
	end
end;
function between(d : date,s : date,e : date) do
	"-------------------------
	 reliably determin if a date is between to other dates
	 ------------------------";
	if NDate(d) >= NDate(s) and NDate(d) <= NDate(e) then
		true
	else
		false
	end
end;
/* ---------------------------------------------
** Add W workdays to a date returning the workday that would result
** ---------------------------------------------*/
function AddWorkDays(S : date,W : number) do
	var X := 1;
	if W > 0 and IsDate(S) then
		while workdays(S, date(year(S), month(S), day(S) + X + 1)) <= W  do 
			X := X + 1
		end
;
		if weekday(date(year(S), month(S), day(S) + X)) = 6 then
			date(year(S), month(S), day(S) + X - 2)
		else
			date(year(S), month(S), day(S) + X)
		end
	else
		S
	end
end;
function monthsbetween(d1 : date, d2 : date ) do
       ( year(d2) - year(d1)  ) * 12 + month(d2) - month(d1) + 1
end;
function weeksbetween(d1 :date, d2 : date ) do
       let yrs := if year(d2) - year(d1) > 1 then year(d2) - year(d1) - 1 else 0 end;
       let mon1 := if date(year(d1),month(d1),week(d1)*7) < d1 then 53 else week(d1) end;
       let mon2 := if date(year(d2),month(d2),week(d2)*7) < d2 then 53 else week(d2) end;
       yrs * 52 + if week(date(year(d1),12,31)) < 52 then 53 else 52 end - mon1 ;
end; 
