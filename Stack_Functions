"---------------------------------
 Stack functions allow you to handle
 situations where you have to traverse
 parent->child relationsips
 ---------------------------------";
function pushStack(Stack : text,Object : text) do
	"--- add to the stack ---";
	if cnt(split(Stack, "@")) > 0 then
		Stack + "@" + Object
	else
		Object
	end
end;
function popStack(Stack : text) do
	"--- remove last item ---";
	let AStack := split(replacex(Stack, "(@){2,}", "g", "@"), "@");
	var finalstack := "";
	"--- zero based array drop last item ---";
	for stack in slice(AStack, 0, count(AStack) - 1) do
		finalstack := finalstack + stack + "@"
	end;
	finalstack
end;
function getStack(Stack : text) do
	"--- return last item from stack";
	let AStack := split(replacex(Stack, "(@){2,}", "g", "@"), "@");
	item(AStack, count(AStack) - 1)
end;

